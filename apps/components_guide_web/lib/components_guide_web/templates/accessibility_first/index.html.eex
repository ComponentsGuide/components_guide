<header class="text-white" style="<%= header_styles() %>">
  <div class="mx-auto max-w-4xl">
    <h1 class="pt-8 row space-x-4 text-4xl text-center font-bold leading-tight text-shadow">
      <div class="row">
        <span class="mr-2 text-4xl">üíÅüèº‚Äç‚ôÄÔ∏èü•á</span>
      </div>
      <span><%= "Accessibility-First" %></span>
    </h1>
    <%= render @view_module, "_nav.html" %>
  </div>
</header>

<article>
  <div class="text-white bg-gray-900">
    <div class="content max-w-4xl mx-auto py-8 text-xl">
      <%= render(@view_module, @article <> ".html", conn: @conn) %>
    </div>
  </div>
</article>

<div class="bg-white" hidden>
  <section class="container pt-8 pb-16 text-2xl">
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Atomic design</h2>
      <p>
        Learn how to name components. Apply the single responsibility principle. Find the indivisible component units, and compose them together into larger molecules.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Styling approaches</h2>
      <p>
        Extract common styles. Define a style guide. How do you keep styles consistent?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Reusability trade-offs</h2>
      <p>
        What sort of components should be resuable? How granular should you go?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Pattern libraries</h2>
      <p>
        When do you need a pattern library? Who are they for? How should you manage them?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Testing components</h2>
      <p>
        Unit test components. Test the behaviours that matter first. Use type-safety to remove impossible states.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Testing data flow</h2>
      <p>
        Test your data flow in isolation. Use test-driven design. Mock APIs and other sources.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Composable component patterns</h2>
      <p>
        Components are <em>really</em> composable. Can we reduce boilerplate? What useful component utilities can we make?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Handling errors</h2>
      <p>
        Handle errors from publishers. What and when should you show users?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Caching data</h2>
      <p>
        Learn how to name components. Apply the single responsibility principle. Find the atomic units, and compose them together.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Improving performance in the right areas</h2>
      <p>
        Learn when you should focus on performance. Measure to be informed. Apply optimization techniques.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Automating repetitive tasks</h2>
      <p>
        Produce screenshots across many devices.
      </p>
    </article>
  </section>
</div>
