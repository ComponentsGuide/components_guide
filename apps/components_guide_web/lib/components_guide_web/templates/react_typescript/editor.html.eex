<script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>

<script type="module">
import * as esbuild from "https://cdn.jsdelivr.net/npm/esbuild-wasm@0.14.1/esm/browser.min.js";
const esbuildPromise = Promise.resolve(esbuild.initialize({
  wasmURL: 'https://cdn.jsdelivr.net/npm/esbuild-wasm@0.14.1/esbuild.wasm',
}).then(() => esbuild));

require.config({
  paths: {
    'vs': 'https://unpkg.com/monaco-editor@latest/min/vs'
  }
});

const proxy = URL.createObjectURL(new Blob([`
  self.MonacoEnvironment = {
    baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
  };
  importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
`], { type: 'text/javascript' }));

window.MonacoEnvironment = { getWorkerUrl: () => proxy };

const theme = window.matchMedia &&
  window.matchMedia('(prefers-color-scheme: dark)').matches
  ? 'vs-dark' : undefined;

const value = `
const a = 1 + 1;

export function Example() {
    return a + 4;
}
`.trim();

const types = fetch("https://workers.cloudflare.com/index.d.ts", { cache: 'force-cache' })
  .then((response) => response.text())
  .catch((err) => `// ${err.message}`);

require(["vs/editor/editor.main"], function () {
  const typescript = monaco.languages.typescript;
  for (const lang of [typescript.typescriptDefaults, typescript.javascriptDefaults]) {
    lang.setCompilerOptions({
      noSemanticValidation: true,
      noSyntaxValidation: false
    });
    lang.setCompilerOptions({
      target: monaco.languages.typescript.ScriptTarget.ESNext,
      allowNonTsExtensions: true,
      allowJs: true,
    });
    /* FIXME: types.then(([uri, content]) => lang.addExtraLib(content, uri)); */
  }
  const input = monaco.editor.create(document.getElementById('input'), {
    language: 'typescript',
    model: monaco.editor.createModel(value, 'typescript', 'ts:worker.ts'),
    value,
    theme,
    minimap: false
  });
  const output = monaco.editor.create(document.getElementById('output'), {
    language: 'javascript',
    value: '//',
    theme,
    readOnly: true,
    minimap: false
  });
  const statusEl = document.getElementById('status');
  const resultEl = document.getElementById('result');
  const onEdit = () => {
    const body = input.getValue();

    const encoder = new TextEncoder();
    const data = encoder.encode(body);
    crypto.subtle.digest('SHA-256', data).then(hash => {
      const hex = Array.from(new Uint8Array(hash), chunk => chunk.toString(16).padStart(2, '0')).join('');
      statusEl.textContent = `SHA256: ${hex}`;
    });

    esbuildPromise
      .then(esbuild => esbuild.transform(body, { loader: 'jsx', format: 'iife', globalName: 'exports', }))
      .then(content => {
        output.getModel().setValue(content.code);

        const executor = new Function(`${content.code}; return exports.Example();`);
        console.log('executor', executor, executor());
        resultEl.textContent = JSON.stringify(executor());
      })
      .catch((err) => output.getModel().setValue(err.message.replace(/^/gm, '// $&')));
    /*fetch('/upload', { method: 'POST', body })
      .then(async (response) => {
        const content = await response.text();
        return response.ok ? content : '// ' + content.trimEnd().split('\n').join('\n// ');
      })
      .then((content) => output.getModel().setValue(content))
      .catch((err) => console.warn(err));*/
  };
  input.onDidChangeModelContent(onEdit);
  const model = input.getModel();
  model.setValue(input.getValue() + "\n");
});
</script>
<output id=status class="block text-xs opacity-50"></output>
<output id=result class="block text-xs opacity-50"></output>
<div class="flex-container" id="container" style="display: flex; min-height: 100vh;">
  <div id="input" style="flex: 1;"></div>
  <div id="output" style="flex: 1;"></div>
</div>
