<style>
  #Demo button[formaction] { display: none } /* In the SPA we show the XML alongside, so hide the server-form button */
</style>
<div id="Demo" class="grid md:grid-cols-2">
  <article class="px-2 py-8 bg-white">
    <div class="HTML"><%= raw(@index_html) %></div>
    <details>
      <summary class="mt-4 pl-2 text-sm cursor-pointer hover:text-lime-700 hover:bg-green-100 transition-all">
        View HTML source
      </summary>
      <pre style="margin-top: 0"><code class="lang-html"></code></pre>
    </details>
  </article>
  <article class="prose prose-invert">
    <output>
      <pre class="break-words whitespace-pre-wrap"><code class="lang-xml"></code></pre>
    </output>
  </article>
</div>

<script type="module">
  const table = new Map();
  window.$use = async (key) => table.get(key) ?? import(`/-es/${key}`);
  window.$register = (key, object) => table.set(key, object);
</script>

<script type="module">
  const encoder = new TextEncoder();
  const decoder = new TextDecoder();
  window.$register("utf8", {
    encode: encoder.encode.bind(encoder),
    encodeInto: encoder.encodeInto.bind(encoder),
    decode: decoder.decode.bind(decoder),
  });
</script>

<script type="module">
  const wasmPromise = fetch("/wasm/module/sitemap_form.wasm", {
    credentials: "omit"
  });

  const $ = selector => document.querySelector(`#Demo ${selector}`);
  const $html = $(".HTML");
  const $outputCode = $("output code");
  const $viewSourceDetails = $("details");

  $outputCode.innerText = "Loadingâ€¦";

  const utf8Encoder = new TextEncoder();
  const utf8Decoder = new TextDecoder();
  
  class MemoryIO {
    constructor(exports) {
      this.memoryBytes = new Uint8Array(exports.memory.buffer);
      this.alloc = exports.alloc;
    }
    
    readString(ptr) {
      const { memoryBytes } = this;
      
      // Search for null-terminating byte.
      const endPtr = memoryBytes.indexOf(0, ptr);
      // Get subsection of memory between start and end, and decode it as UTF-8.
      return utf8Decoder.decode(memoryBytes.subarray(ptr, endPtr));
    }
    
    writeString(stringValue) {
      const { memoryBytes, alloc } = this;
      
      stringValue = stringValue.toString();
      const bytes = utf8Encoder.encode(stringValue);
      const strPtr = alloc(bytes.length + 1);
      utf8Encoder.encodeInto(stringValue, memoryBytes.subarray(strPtr));
      memoryBytes[strPtr + bytes.length] = 0x0;
      return strPtr;
    }
  }

  const { instance } = await WebAssembly.instantiateStreaming(wasmPromise);
  const { exports } = instance;
  const io = new MemoryIO(exports);
  
  const $submit = Symbol("submit");
  
  function update(input) {
    const changeURL = input === $submit;
    const rerender = input === $submit || input instanceof URLSearchParams;

    const form = $html.querySelector("form");
    
    exports.free_all();
    const query = input instanceof URLSearchParams ? input : new URLSearchParams(new FormData(form));
    const queryPtr = io.writeString(query);
    exports.set_www_form_data(queryPtr);
    
    const xml = io.readString(exports.xml_sitemap());
    $outputCode.textContent = xml;
    
    if (changeURL) {
      const url = new URL(window.location);
      url.search = query;
      history.pushState({}, "", url);
    }
    
    if (rerender) {
      const html = io.readString(exports.html_index());
      const newDoc = new DOMParser().parseFromString(html, "text/html");
      $html.innerHTML = newDoc.documentElement.innerHTML;
      $html.querySelector("[autofocus]")?.focus();
      $viewSourceDetails.open = false;
    }
    
    window.Prism.highlightElement($outputCode);
  }
  
  window.requestAnimationFrame(update);
  window.addEventListener('popstate', () => {
    const { searchParams } = new URL(window.location);
    update(searchParams);
  });
  
  $html.addEventListener('input', update);
  $html.addEventListener('submit', event => {
    event.preventDefault();
    update($submit);
  });
  
  $viewSourceDetails.addEventListener('toggle', () => {
    if (!$viewSourceDetails.open) return;
    
    const html = $viewSourceDetails.previousElementSibling.innerHTML;
    const $code = $viewSourceDetails.querySelector("code");
    $code.textContent = `<!doctype html>\n` + html.trim();
    window.Prism.highlightElement($code);
  });
</script>

<div class="mx-auto p-4 prose prose-invert lg:prose-xml">
  <p>
    This is an interactive version live in the browser.
    <a href="/wasm-demo/sitemap-form/index.html">See a server-only</a>
    version running from the <em>exact same</em>
    <%= @wasm_byte_count %> byte WebAssembly module.
  </p>
</div>
http
