<enhanced-navigation class="flex flex-col" data-add-article-navigation>
  <div class="mx-auto grid-flow-col md:grid md:grid-cols-[20rem_minmax(0,var(--max-width))] xl:grid-cols-[20rem_minmax(0,var(--max-width))_18rem] gap-8" style="--max-width: 46em">
    <div class="md:sticky top-0 md:h-screen pl-4 pt-16 text-white">
      <%= render view_module(@conn), "_nav.html", conn: @conn %>
    </div>
    <article class="text-white bg-gray-900 px-4 md:px-0">
      <div class="<%= view_module(@conn).article_content_class(@article) %>">
        <%= render(view_module(@conn), @article <> ".html", conn: @conn) %>
      </div>
    </article>
    <aside class="sticky top-0 h-screen hidden xl:block" hidden>
      <nav class="pt-16 text-gray-200">
        <div class="pl-5 pb-2 font-bold uppercase text-white">On this page</div>
        <slot name="article-navigation-items">
          <template>
            <ul class="list-none">
              <li class="border-l-4 border-gray-800 hover:border-blue-400"></li>
            </ul>
            <a href="#" class="inline-flex py-1 pl-4 hover:text-blue-400"></a>
          </template>
        </slot>
      </nav>
    </aside>
  </div>
</enhanced-navigation>

<div class="bg-white" hidden>
  <section class="container pt-8 pb-16 text-2xl">
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Atomic design</h2>
      <p>
        Learn how to name components. Apply the single responsibility principle. Find the indivisible component units, and compose them together into larger molecules.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Styling approaches</h2>
      <p>
        Extract common styles. Define a style guide. How do you keep styles consistent?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Reusability trade-offs</h2>
      <p>
        What sort of components should be resuable? How granular should you go?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Pattern libraries</h2>
      <p>
        When do you need a pattern library? Who are they for? How should you manage them?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Testing components</h2>
      <p>
        Unit test components. Test the behaviours that matter first. Use type-safety to remove impossible states.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Testing data flow</h2>
      <p>
        Test your data flow in isolation. Use test-driven design. Mock APIs and other sources.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Composable component patterns</h2>
      <p>
        Components are <em>really</em> composable. Can we reduce boilerplate? What useful component utilities can we make?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Handling errors</h2>
      <p>
        Handle errors from publishers. What and when should you show users?
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Caching data</h2>
      <p>
        Learn how to name components. Apply the single responsibility principle. Find the atomic units, and compose them together.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Improving performance in the right areas</h2>
      <p>
        Learn when you should focus on performance. Measure to be informed. Apply optimization techniques.
      </p>
    </article>
    <article class="mb-8">
      <h2 class="mb-2 text-4xl leading-normal text-teal-800">Automating repetitive tasks</h2>
      <p>
        Produce screenshots across many devices.
      </p>
    </article>
  </section>
</div>
