(module $LabSwatch
  (import "math" "powf32" (func $powf32 (param f32 f32) (result f32)))
  (import "format" "f32" (func $format_f32 (param f32 i32) (result i32)))
  (import "log" "i32" (func $log_i32 (param i32)))
  (import "log" "f32" (func $log_f32 (param f32)))
  (memory (export "memory") 2)
  (global $bump_offset (mut i32) (i32.const 65536))
  (global $bump_mark (mut i32) (i32.const 0))
  (global $bump_write_level (mut i32) (i32.const 0))
  (global $swatch_size (export "swatch_size") (mut f32) (f32.const 120.0))
  (global $quantization (export "quantization") (mut f32) (f32.const 16.0))
  (global $l (export "l") (mut f32) (f32.const 88.0))
  (global $a (export "a") (mut f32) (f32.const 94.0))
  (global $b (export "b") (mut f32) (f32.const 60.0))
  (global $mouse_offset_x (mut f32) (f32.const 0.0))
  (global $mouse_offset_y (mut f32) (f32.const 0.0))
  (global $component_l i32 (i32.const 1))
  (global $component_a i32 (i32.const 2))
  (global $component_b i32 (i32.const 3))
  (global $last_changed_component (export "last_changed_component") (mut i32) (i32.const 0))
  (data (i32.const 255) "<div class=\"flex gap-4\">\n")
  (data (i32.const 282) "</div>\n")
  (data (i32.const 291) "<output class=\"flex flex-col mt-4 font-mono\">\n")
  (data (i32.const 339) "<p class=\"flex items-center gap-1\">")
  (data (i32.const 375) "<svg viewBox=\"0 0 1 1\" width=\"1rem\" height=\"1rem\"><rect width=\"1\" height=\"1\" fill=\"")
  (data (i32.const 459) "\" /></svg> ")
  (data (i32.const 471) "</p>\n")
  (data (i32.const 478) "</output>\n")
  (data (i32.const 490) "lab(")
  (data (i32.const 495) "% ")
  (data (i32.const 498) " ")
  (data (i32.const 500) ")")
  (data (i32.const 502) "rgb(")
  (data (i32.const 507) "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\" width=\"")
  (data (i32.const 573) "\" height=\"")
  (data (i32.const 584) "\" class=\"touch-none\" data-action ")
  (data (i32.const 618) "data-pointerdown=\"l_changed\" data-pointerdown+pointermove=\"l_changed\"")
  (data (i32.const 688) "data-pointerdown=\"a_changed\" data-pointerdown+pointermove=\"a_changed\"")
  (data (i32.const 758) "data-pointerdown=\"b_changed\" data-pointerdown+pointermove=\"b_changed\"")
  (data (i32.const 828) ">\n")
  (data (i32.const 832) "<defs>\n")
  (data (i32.const 841) "</defs>\n")
  (data (i32.const 851) "<rect width=\"1\" height=\"1\" fill=\"url('#lab-")
  (data (i32.const 895) "l")
  (data (i32.const 897) "a")
  (data (i32.const 899) "b")
  (data (i32.const 901) "-gradient')\" />\n")
  (data (i32.const 919) "</svg>\n")
  (data (i32.const 928) "<circle data-drag-knob=\"\" cx=\"")
  (data (i32.const 959) "\" cy=\"")
  (data (i32.const 966) "\" r=\"0.05\" fill=\"white\" stroke=\"black\" stroke-width=\"0.01\" />\n")
  (data (i32.const 1030) "<linearGradient id=\"")
  (data (i32.const 1051) "lab-l-gradient")
  (data (i32.const 1066) "lab-a-gradient")
  (data (i32.const 1081) "lab-b-gradient")
  (data (i32.const 1096) "\" gradientTransform=\"scale(1.414) rotate(45)\">\n")
  (data (i32.const 1145) "</linearGradient>\n")
  (data (i32.const 1165) "<stop offset=\"")
  (data (i32.const 1180) "%\" stop-color=\"")
  (data (i32.const 1196) "\" />\n")
  (data (i32.const 1203) "rgba(")
  (data (i32.const 1209) ",")
  (data (i32.const 1211) ",1)")
  (func $bump_alloc (param $size i32) (result i32)
    (global.get $bump_offset)
    (i32.add (global.get $bump_offset) (local.get $size))
    (global.set $bump_offset)
  )
  (func $memcpy (param $dest i32) (param $src i32) (param $byte_count i32)
    (local $i i32)
    (loop $EachByte
      (i32.eq (local.get $i) (local.get $byte_count))
      (if 
        (then
          return
        )
      )
      (i32.store8 (i32.add (local.get $dest) (local.get $i)) (i32.load8_u (i32.add (local.get $src) (local.get $i))))
      (i32.add (local.get $i) (i32.const 1))
      (local.set $i)
      (br $EachByte)
    )
  )
  (func $memset (param $dest i32) (param $u8 i32) (param $byte_count i32)
    (local $i i32)
    (loop $EachByte
      (i32.eq (local.get $i) (local.get $byte_count))
      (if 
        (then
          return
        )
      )
      (i32.store8 (i32.add (local.get $dest) (local.get $i)) (local.get $u8))
      (i32.add (local.get $i) (i32.const 1))
      (local.set $i)
      (br $EachByte)
    )
  )
  (func $streq (param $address_a i32) (param $address_b i32) (result i32)
    (local $i i32)
    (local $byte_a i32)
    (local $byte_b i32)
    (loop $EachByte (result i32)
      (i32.load8_u (i32.add (local.get $address_a) (local.get $i)))
      (local.set $byte_a)
      (i32.load8_u (i32.add (local.get $address_b) (local.get $i)))
      (local.set $byte_b)
      (i32.eqz (local.get $byte_a))
      (if 
        (then
          (return (i32.eqz (local.get $byte_b)))
        )
      )
      (i32.eq (local.get $byte_a) (local.get $byte_b))
      (if 
        (then
          (i32.add (local.get $i) (i32.const 1))
          (local.set $i)
          (br $EachByte)
        )
      )
      (return (i32.const 0))
    )
  )
  (func $strlen (param $string_ptr i32) (result i32)
    (local $count i32)
    (loop $EachChar
      (i32.load8_u (i32.add (local.get $string_ptr) (local.get $count)))
      (if 
        (then
          (i32.add (local.get $count) (i32.const 1))
          (local.set $count)
          (br $EachChar)
        )
      )
    )
    (local.get $count)
  )
  (func $u32toa_count (param $value i32) (result i32)
    (local $digit_count i32)
    (local $digit i32)
    (loop $Digits
      (i32.add (local.get $digit_count) (i32.const 1))
      (local.set $digit_count)
      (i32.rem_u (local.get $value) (i32.const 10))
      (local.set $digit)
      (i32.div_u (local.get $value) (i32.const 10))
      (local.set $value)
      (i32.gt_u (local.get $value) (i32.const 0))
      (br_if $Digits)
    )
    (local.get $digit_count)
  )
  (func $u32toa (param $value i32) (param $end_offset i32) (result i32)
    (local $working_offset i32)
    (local $digit i32)
    (local.get $end_offset)
    (local.set $working_offset)
    (loop $Digits
      (i32.sub (local.get $working_offset) (i32.const 1))
      (local.set $working_offset)
      (i32.rem_u (local.get $value) (i32.const 10))
      (local.set $digit)
      (i32.div_u (local.get $value) (i32.const 10))
      (local.set $value)
      (i32.store8 (local.get $working_offset) (i32.add (i32.const 48) (local.get $digit)))
      (i32.gt_u (local.get $value) (i32.const 0))
      (br_if $Digits)
    )
    (local.get $working_offset)
  )
  (func $format_u32 (param $value i32) (param $str_ptr i32) (result i32)
    (local $working_offset i32)
    (local $last_offset i32)
    (local $digit i32)
    (i32.add (local.get $str_ptr) (call $u32toa_count (local.get $value)))
    (local.set $last_offset)
    (local.get $last_offset)
    (local.set $working_offset)
    (loop $Digits
      (i32.sub (local.get $working_offset) (i32.const 1))
      (local.set $working_offset)
      (i32.rem_u (local.get $value) (i32.const 10))
      (local.set $digit)
      (i32.div_u (local.get $value) (i32.const 10))
      (local.set $value)
      (i32.store8 (local.get $working_offset) (i32.add (i32.const 48) (local.get $digit)))
      (i32.gt_u (local.get $value) (i32.const 0))
      (br_if $Digits)
    )
    (local.get $last_offset)
  )
  (func $bump_write_start
    (i32.eqz (global.get $bump_write_level))
    (if 
      (then
        (global.get $bump_offset)
        (global.set $bump_mark)
      )
    )
    (i32.add (global.get $bump_write_level) (i32.const 1))
    (global.set $bump_write_level)
  )
  (func $bump_write_done (result i32)
    (i32.gt_u (global.get $bump_write_level) (i32.const 0))
    (if 
      (then
        nop
      )
      (else
        unreachable
      )
    )
    (i32.sub (global.get $bump_write_level) (i32.const 1))
    (global.set $bump_write_level)
    (i32.eqz (global.get $bump_write_level))
    (if 
      (then
        (i32.store8 (global.get $bump_offset) (i32.const 0))
        (i32.add (global.get $bump_offset) (i32.const 1))
        (global.set $bump_offset)
      )
    )
    (global.get $bump_mark)
  )
  (func $bump_write_str (param $str_ptr i32)
    (local $len i32)
    (i32.eq (local.get $str_ptr) (global.get $bump_mark))
    (if 
      (then
        return
      )
    )
    (call $strlen (local.get $str_ptr))
    (local.set $len)
    (call $memcpy (global.get $bump_offset) (local.get $str_ptr) (local.get $len))
    (i32.add (global.get $bump_offset) (local.get $len))
    (global.set $bump_offset)
  )
  (func $bump_written? (result i32)
    (i32.gt_u (global.get $bump_offset) (global.get $bump_mark))
  )
  (func $free_all (export "free_all")
    (i32.const 65536)
    (global.set $bump_offset)
  )
  (func $lab_to_xyz_component (param $v f32) (result f32)
    (local $cubed f32)
    (call $powf32 (local.get $v) (f32.const 3.0))
    (local.set $cubed)
    (f32.gt (local.get $cubed) (f32.const 0.008856451679035631))
    (if (result f32)
      (then
        (local.get $cubed)
      )
      (else
        (f32.div (f32.sub (f32.mul (f32.const 116.0) (local.get $v)) (f32.const 16.0)) (f32.const 903.2962962962963))
      )
    )
  )
  (func $lab_to_xyz (param $l f32) (param $a f32) (param $b f32) (result f32 f32 f32)
    (local $fy f32)
    (local $fx f32)
    (local $fz f32)
    (f32.div (f32.add (local.get $l) (f32.const 16.0)) (f32.const 116.0))
    (local.set $fy)
    (f32.add (f32.div (local.get $a) (f32.const 500.0)) (local.get $fy))
    (local.set $fx)
    (f32.sub (local.get $fy) (f32.div (local.get $b) (f32.const 200.0)))
    (local.set $fz)
    (f32.mul (call $lab_to_xyz_component (local.get $fx)) (f32.const 0.96422))
    (f32.mul (call $lab_to_xyz_component (local.get $fy)) (f32.const 1.0))
    (f32.mul (call $lab_to_xyz_component (local.get $fz)) (f32.const 0.82521))
  )
  (func $xyz_to_lab_component (param $c f32) (result f32)
    (f32.gt (local.get $c) (f32.const 0.008856451679035631))
    (if (result f32)
      (then
        (call $powf32 (local.get $c) (f32.div (f32.const 1.0) (f32.const 3.0)))
      )
      (else
        (f32.div (f32.add (f32.mul (f32.const 903.2962962962963) (local.get $c)) (f32.const 16.0)) (f32.const 116.0))
      )
    )
  )
  (func $xyz_to_lab (param $x f32) (param $y f32) (param $z f32) (result f32 f32 f32)
    (local $f0 f32)
    (local $f1 f32)
    (local $f2 f32)
    (call $xyz_to_lab_component (f32.div (local.get $x) (f32.const 0.96422)))
    (local.set $f0)
    (call $xyz_to_lab_component (f32.div (local.get $y) (f32.const 1.0)))
    (local.set $f1)
    (call $xyz_to_lab_component (f32.div (local.get $z) (f32.const 0.82521)))
    (local.set $f2)
    (f32.sub (f32.mul (f32.const 116.0) (local.get $f1)) (f32.const 16.0))
    (f32.mul (f32.const 500.0) (f32.sub (local.get $f0) (local.get $f1)))
    (f32.mul (f32.const 200.0) (f32.sub (local.get $f1) (local.get $f2)))
  )
  (func $linear_srgb_to_srgb (param $r f32) (param $g f32) (param $b f32) (result f32 f32 f32)
    (call $linear_srgb_to_srgb_component (local.get $r))
    (call $linear_srgb_to_srgb_component (local.get $g))
    (call $linear_srgb_to_srgb_component (local.get $b))
  )
  (func $linear_srgb_to_srgb_component (param $c f32) (result f32)
    (f32.gt (local.get $c) (f32.const 0.0031308))
    (if (result f32)
      (then
        (f32.sub (f32.mul (f32.const 1.055) (call $powf32 (local.get $c) (f32.div (f32.const 1.0) (f32.const 2.4)))) (f32.const 0.055))
      )
      (else
        (f32.mul (f32.const 12.92) (local.get $c))
      )
    )
  )
  (func $srgb_to_linear_srgb (param $r f32) (param $g f32) (param $b f32) (result f32 f32 f32)
    (call $srgb_to_linear_srgb_component (local.get $r))
    (call $srgb_to_linear_srgb_component (local.get $g))
    (call $srgb_to_linear_srgb_component (local.get $b))
  )
  (func $srgb_to_linear_srgb_component (param $c f32) (result f32)
    (f32.lt (local.get $c) (f32.const 0.04045))
    (if (result f32)
      (then
        (f32.div (local.get $c) (f32.const 12.92))
      )
      (else
        (call $powf32 (f32.div (f32.add (local.get $c) (f32.const 0.055)) (f32.const 1.055)) (f32.const 2.4))
      )
    )
  )
  (func $xyz_to_linear_srgb (param $x f32) (param $y f32) (param $z f32) (result f32 f32 f32)
    (f32.max (f32.min (f32.sub (f32.sub (f32.mul (local.get $x) (f32.const 3.1338561)) (f32.mul (local.get $y) (f32.const 1.6168667))) (f32.mul (f32.const 0.4906146) (local.get $z))) (f32.const 1.0)) (f32.const 0.0))
    (f32.max (f32.min (f32.add (f32.add (f32.mul (local.get $x) (f32.const -0.9787684)) (f32.mul (local.get $y) (f32.const 1.9161415))) (f32.mul (f32.const 0.033454) (local.get $z))) (f32.const 1.0)) (f32.const 0.0))
    (f32.max (f32.min (f32.add (f32.sub (f32.mul (local.get $x) (f32.const 0.0719453)) (f32.mul (local.get $y) (f32.const 0.2289914))) (f32.mul (f32.const 1.4052427) (local.get $z))) (f32.const 1.0)) (f32.const 0.0))
  )
  (func $xyz_to_srgb (param $x f32) (param $y f32) (param $z f32) (result f32 f32 f32)
    (call $xyz_to_linear_srgb (local.get $x) (local.get $y) (local.get $z))
    (call $linear_srgb_to_srgb)
  )
  (func $linear_srgb_to_xyz (param $r f32) (param $g f32) (param $b f32) (result f32 f32 f32)
    (f32.add (f32.add (f32.mul (f32.const 0.4360747) (local.get $r)) (f32.mul (f32.const 0.3850649) (local.get $g))) (f32.mul (f32.const 0.1430804) (local.get $b)))
    (f32.add (f32.add (f32.mul (f32.const 0.2225045) (local.get $r)) (f32.mul (f32.const 0.7168786) (local.get $g))) (f32.mul (f32.const 0.0606169) (local.get $b)))
    (f32.add (f32.add (f32.mul (f32.const 0.0139322) (local.get $r)) (f32.mul (f32.const 0.0971045) (local.get $g))) (f32.mul (f32.const 0.7141733) (local.get $b)))
  )
  (func $srgb_to_xyz (param $r f32) (param $g f32) (param $b f32) (result f32 f32 f32)
    (call $srgb_to_linear_srgb (local.get $r) (local.get $g) (local.get $b))
    (call $linear_srgb_to_xyz)
  )
  (func $lab_to_srgb (param $l f32) (param $a f32) (param $b f32) (result f32 f32 f32)
    (call $lab_to_xyz (local.get $l) (local.get $a) (local.get $b))
    (call $xyz_to_srgb)
  )
  (func $srgb_to_lab (param $r f32) (param $g f32) (param $b f32) (result f32 f32 f32)
    (call $srgb_to_xyz (local.get $r) (local.get $g) (local.get $b))
    (call $xyz_to_lab)
  )
  (export "alloc" (func $bump_alloc))  (func $l_changed (export "l_changed") (param $new_value f32)
    (global.get $component_l)
    (global.set $last_changed_component)
  )
  (func $a_changed (export "a_changed") (param $new_value f32)
    (global.get $component_a)
    (global.set $last_changed_component)
  )
  (func $b_changed (export "b_changed") (param $new_value f32)
    (global.get $component_b)
    (global.set $last_changed_component)
  )
  (func $pointer_offset_changed (export "pointerdown_offset") (export "pointermove_offset") (param $x f32) (param $y f32)
    (local $offset f32)
    (f32.div (f32.add (f32.div (local.get $x) (global.get $swatch_size)) (f32.div (local.get $y) (global.get $swatch_size))) (f32.const 2.0))
    (local.set $offset)
    (i32.eq (global.get $last_changed_component) (global.get $component_l))
    (if 
      (then
        (f32.mul (local.get $offset) (f32.const 100.0))
        (global.set $l)
      )
    )
    (i32.eq (global.get $last_changed_component) (global.get $component_a))
    (if 
      (then
        (f32.nearest (f32.mul (f32.sub (f32.mul (local.get $offset) (f32.const 2.0)) (f32.const 1.0)) (f32.const 127.0)))
        (global.set $a)
      )
    )
    (i32.eq (global.get $last_changed_component) (global.get $component_b))
    (if 
      (then
        (f32.nearest (f32.mul (f32.sub (f32.mul (local.get $offset) (f32.const 2.0)) (f32.const 1.0)) (f32.const 127.0)))
        (global.set $b)
      )
    )
  )
  (func $to_html (export "to_html") (result i32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 255))
    (call $swatch_svg (global.get $component_l))
    drop
    (call $swatch_svg (global.get $component_a))
    drop
    (call $swatch_svg (global.get $component_b))
    drop
    (call $bump_write_str (i32.const 282))
    (call $do_output_code)
    drop
    (call $bump_write_done)
  )
  (func $do_output_code (result i32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 291))
    (call $bump_write_str (i32.const 339))
    (call $bump_write_str (i32.const 375))
    (call $do_css_lab)
    (call $bump_write_str (i32.const 459))
    (call $do_css_lab)
    (call $bump_write_str (i32.const 471))
    (call $bump_write_str (i32.const 339))
    (call $bump_write_str (i32.const 375))
    (call $do_css_rgb)
    (call $bump_write_str (i32.const 459))
    (call $do_css_rgb)
    (call $bump_write_str (i32.const 471))
    (call $bump_write_str (i32.const 478))
    (call $bump_write_done)
  )
  (func $do_css_lab
    (local $r f32)
    (local $g f32)
    (local $b f32)
    (call $bump_write_str (i32.const 490))
    (i32.add (call $format_f32 (global.get $l) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 495))
    (i32.add (call $format_f32 (global.get $a) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 498))
    (i32.add (call $format_f32 (global.get $b) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 500))
  )
  (func $do_css_rgb
    (local $r f32)
    (local $g f32)
    (local $b f32)
    (call $lab_to_srgb (global.get $l) (global.get $a) (global.get $b))
    
    (local.set $b)
    
    (local.set $g)
    
    (local.set $r)
    (call $bump_write_str (i32.const 502))
    (i32.add (call $format_f32 (f32.nearest (f32.mul (local.get $r) (f32.const 255.0))) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 498))
    (i32.add (call $format_f32 (f32.nearest (f32.mul (local.get $g) (f32.const 255.0))) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 498))
    (i32.add (call $format_f32 (f32.nearest (f32.mul (local.get $b) (f32.const 255.0))) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 500))
  )
  (func $to_svg (export "to_svg") (result i32)
    (call $swatch_svg (global.get $component_l))
  )
  (func $swatch_svg (param $component_id i32) (result i32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 507))
    (i32.add (call $format_f32 (global.get $swatch_size) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 573))
    (i32.add (call $format_f32 (global.get $swatch_size) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 584))
    (i32.eq (local.get $component_id) (global.get $component_l))
    (if 
      (then
        (call $bump_write_str (i32.const 618))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_a))
    (if 
      (then
        (call $bump_write_str (i32.const 688))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_b))
    (if 
      (then
        (call $bump_write_str (i32.const 758))
      )
    )
    (call $bump_write_str (i32.const 828))
    (call $bump_write_str (i32.const 832))
    (call $do_linear_gradient (local.get $component_id))
    drop
    (call $bump_write_str (i32.const 841))
    (call $bump_write_str (i32.const 851))
    (i32.eq (local.get $component_id) (global.get $component_l))
    (if 
      (then
        (call $bump_write_str (i32.const 895))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_a))
    (if 
      (then
        (call $bump_write_str (i32.const 897))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_b))
    (if 
      (then
        (call $bump_write_str (i32.const 899))
      )
    )
    (call $bump_write_str (i32.const 901))
    (i32.eq (local.get $component_id) (global.get $component_l))
    (if 
      (then
        (call $do_drag_knob (f32.div (global.get $l) (f32.const 100.0)))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_a))
    (if 
      (then
        (call $do_drag_knob (f32.add (f32.div (f32.div (global.get $a) (f32.const 127.0)) (f32.const 2.0)) (f32.const 0.5)))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_b))
    (if 
      (then
        (call $do_drag_knob (f32.add (f32.div (f32.div (global.get $b) (f32.const 127.0)) (f32.const 2.0)) (f32.const 0.5)))
      )
    )
    (call $bump_write_str (i32.const 919))
    (call $bump_write_done)
  )
  (func $do_drag_knob (param $offset f32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 928))
    (i32.add (call $format_f32 (local.get $offset) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 959))
    (i32.add (call $format_f32 (local.get $offset) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 966))
    (call $bump_write_done)
    drop
  )
  (func $interpolate (param $t f32) (param $lowest f32) (param $highest f32) (result f32)
    (f32.add (f32.mul (f32.sub (local.get $highest) (local.get $lowest)) (local.get $t)) (local.get $lowest))
  )
  (func $do_linear_gradient (param $component_id i32) (result i32)
    (local $i f32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 1030))
    (i32.eq (local.get $component_id) (global.get $component_l))
    (if 
      (then
        (call $bump_write_str (i32.const 1051))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_a))
    (if 
      (then
        (call $bump_write_str (i32.const 1066))
      )
    )
    (i32.eq (local.get $component_id) (global.get $component_b))
    (if 
      (then
        (call $bump_write_str (i32.const 1081))
      )
    )
    (call $bump_write_str (i32.const 1096))
    (loop $Stops
      (call $do_linear_gradient_stop_for (f32.div (local.get $i) (global.get $quantization)) (local.get $component_id))
      drop
      (f32.add (local.get $i) (f32.const 1.0))
      (local.set $i)
      (f32.le (local.get $i) (global.get $quantization))
      (br_if $Stops)
    )
    (call $bump_write_str (i32.const 1145))
    (call $bump_write_done)
  )
  (func $do_linear_gradient_stop_for (param $fraction f32) (param $component_id i32) (result i32)
    (block $i32_match (result i32)
      (i32.eq (local.get $component_id) (global.get $component_l))
      (if 
        (then
          (call $do_linear_gradient_stop (local.get $fraction) (call $interpolate (local.get $fraction) (f32.const 0.0) (f32.const 100.0)) (global.get $a) (global.get $b))
          (br $i32_match)
        )
      )
      (i32.eq (local.get $component_id) (global.get $component_a))
      (if 
        (then
          (call $do_linear_gradient_stop (local.get $fraction) (global.get $l) (call $interpolate (local.get $fraction) (f32.const -127.0) (f32.const 127.0)) (global.get $b))
          (br $i32_match)
        )
      )
      (i32.eq (local.get $component_id) (global.get $component_b))
      (if 
        (then
          (call $do_linear_gradient_stop (local.get $fraction) (global.get $l) (global.get $a) (call $interpolate (local.get $fraction) (f32.const -127.0) (f32.const 127.0)))
          (br $i32_match)
        )
      )
      unreachable
    )
  )
  (func $do_linear_gradient_stop (param $fraction f32) (param $l f32) (param $a f32) (param $b f32) (result i32)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 1165))
    (i32.add (call $format_f32 (f32.mul (local.get $fraction) (f32.const 100.0)) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 1180))
    (call $do_css_color_lab_srgb (local.get $l) (local.get $a) (local.get $b))
    drop
    (call $bump_write_str (i32.const 1196))
    (call $bump_write_done)
  )
  (func $do_css_color_lab_srgb (param $l f32) (param $a f32) (param $b f32) (result i32)
    (local $red f32)
    (local $green f32)
    (local $blue f32)
    (call $lab_to_srgb (local.get $l) (local.get $a) (local.get $b))
    (f32.max (f32.min (f32.nearest (f32.mul  (f32.const 255.0))) (f32.const 255.0)) (f32.const 0.0))
    (local.set $blue)
    (f32.max (f32.min (f32.nearest (f32.mul  (f32.const 255.0))) (f32.const 255.0)) (f32.const 0.0))
    (local.set $green)
    (f32.max (f32.min (f32.nearest (f32.mul  (f32.const 255.0))) (f32.const 255.0)) (f32.const 0.0))
    (local.set $red)
    (call $bump_write_start)
    (call $bump_write_str (i32.const 1203))
    (i32.add (call $format_f32 (local.get $red) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 1209))
    (i32.add (call $format_f32 (local.get $green) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 1209))
    (i32.add (call $format_f32 (local.get $blue) (global.get $bump_offset)) (global.get $bump_offset))
    (global.set $bump_offset)
    (call $bump_write_str (i32.const 1211))
    (call $bump_write_done)
  )
)
